const getCaseGoodsLotId = require('../searches/get_casegoods_lotid');

/**
 * Performs a case goods adjustment action
 *
 * @async
 * @param {object} z - The instance of the Zapier Z object
 * @param {object} bundle - The input bundle containing necessary data
 * @return {object} - An object containing the reference numbers generated by the API
 * @throws {Error} - If there is an unexpected API response format
 */
const perform = async (z, bundle) => {
  const caseGoodsNames = bundle.inputData.caseGoodsNames.split(',');
  const bottleQuantities = bundle.inputData.bottleQuantities.split(',').map(
      Number);

  const referenceNumbers = [];

  for (let i = 0; i < caseGoodsNames.length; i++) {
    if (caseGoodsNames[i].startsWith('CG-')) {
      bundle.inputData.caseGoodsName = caseGoodsNames[i];

      // Log the current Case Goods Name being processed
      z.console.log(`Processing Case Goods Name: ${caseGoodsNames[i]}`);

      const lotIdResponse = await getCaseGoodsLotId.operation.perform(z,
          bundle);

      // Log the received lotIdResponse
      z.console.log(`Received lotIdResponse for ${caseGoodsNames[i]}: `,
          lotIdResponse);

      // Extract the lotId
      const lotId = lotIdResponse.id; // Adjust based on the actual structure of lotIdResponse

      // Log the extracted lotId
      z.console.log(`Extracted lotId for ${caseGoodsNames[i]}: `, lotId);

      const options = {
        url: `https://sutter.innovint.us/api/v1/wineries/${bundle.inputData.wineryId}/actions/caseGoodsAdjustmentActions`, // eslint-disable-line max-len
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Access-Token ${bundle.authData.apiKey}`,
        },
        body: JSON.stringify({
          'data': {
            'bottleChanges': {
              'bottles': bottleQuantities[i],
              'cases': 0,
              'pallets': 0,
            },
            'compliance': bundle.inputData.compliance,
            'lotId': lotId, // Use the retrieved lotId
            'effectiveAt': bundle.inputData.effectiveAt,
          },
        }),
      };

      // Log the final API request body
      z.console.log(`API Request Body for ${caseGoodsNames[i]}: `,
          options.body);

      const response = await z.request(options);
      response.throwForStatus();
      const results = response.json;

      if (!results || !results.data || !results.data.referenceNumber) {
        throw new Error('Unexpected API response format');
      }

      referenceNumbers.push(results.data.referenceNumber);
    }
  }

  return {referenceNumbers};
};

module.exports = {
  key: 'createCaseGoodsAdjustment',
  noun: 'Case Goods Adjustment',
  display: {
    label: 'Case Goods Adjustment',
    description: 'Performs a Case Goods Adjustment.',
  },
  operation: {
    perform,
    inputFields: [
      {
        key: 'wineryId',
        required: true,
        type: 'string',
        dynamic: 'listWineriesDropdown.id.name',
      },
      {
        key: 'caseGoodsNames',
        required: true,
        type: 'string',
        helpText: 'Comma-separated list of Case Goods Names',
      },
      {
        key: 'bottleQuantities',
        required: true,
        type: 'string',
        helpText: 'Comma-separated list of quantities corresponding to each Case Goods Name',
      },
      {
        key: 'compliance',
        required: true,
        type: 'string',
        helpText: 'Compliance information for the adjustment',
        default: 'REMOVED_TAXPAID',
        choices: {
          ONBOARDING: 'ONBOARDING',
          TAX_PAID_WINE_RETURNED_TO_BOND: 'TAX_PAID_WINE_RETURNED_TO_BOND',
          INVENTORY_GAINS: 'INVENTORY_GAINS',
          INVENTORY_SHORTAGE: 'INVENTORY_SHORTAGE',
          REMOVED_FOR_EXPORT: 'REMOVED_FOR_EXPORT',
          REMOVED_FOR_FAMILY_USE: 'REMOVED_FOR_FAMILY_USE',
          USED_FOR_TESTING: 'USED_FOR_TESTING',
          USED_FOR_TASTING: 'USED_FOR_TASTING',
          BREAKAGE: 'BREAKAGE',
          BOND_TO_BOND_TRANSFER_IN: 'BOND_TO_BOND_TRANSFER_IN',
          BOND_TO_BOND_TRANSFER_OUT: 'BOND_TO_BOND_TRANSFER_OUT',
          REMOVED_TAXPAID: 'REMOVED_TAXPAID',
          CG_BOTTLED_WINE_DUMPED_TO_BULK: 'CG_BOTTLED_WINE_DUMPED_TO_BULK',
        },
      },
      {
        key: 'effectiveAt',
        required: true,
        type: 'datetime',
        helpText: 'The effective date and time for the adjustment',
      },
    ],
    sample: {
      referenceNumbers: ['example_ref_number1', 'example_ref_number2'],
    },
  },
};


